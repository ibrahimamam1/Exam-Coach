problem: Write a Python program to calculate the factorial of a given number using a recursive function.
answer: def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

num = 5
result = factorial(num)
print(f"The factorial of {num} is {result}.")


problem: Write a MATLAB program to solve a system of linear equations using the Gauss-Seidel method.
answer: A = [4, -1, 1; 2, 7, 1; 1, -3, 12];
b = [3; 19; 31];
x = [0; 0; 0];
n = length(x);
iter = 10;

for k = 1:iter
    for i = 1:n
        sum = 0;
        for j = 1:n
            if j ~= i
                sum = sum + A(i,j) * x(j);
            end
        end
        x(i) = (b(i) - sum) / A(i,i);
    end
end

disp("Solution:");
disp(x);


problem:Write a C program to implement the Newton-Raphson method to find the root of a given equation.
answer: #include <stdio.h>
#include <math.h>

#define EPSILON 0.0001

double f(double x) {
    return x * x - 4;
}

double f_prime(double x) {
    return 2 * x;
}

double newton_raphson(double x) {
    double h = f(x) / f_prime(x);
    while (fabs(h) >= EPSILON) {
        h = f(x) / f_prime(x);
        x = x - h;
    }
    return x;
}

int main() {
    double x0 = 2.0;  // Initial guess
    double root = newton_raphson(x0);

    printf("Approximate root: %lf\n", root);

    return 0;
}


problem: Write a C program to implement a binary search algorithm to find the position of a given element in a sorted array.
answer: #include <stdio.h>

int binarySearch(int arr[], int left, int right, int target) {
    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target) {
            return mid;
        }

        if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return -1;  // Element not found
}

int main() {
    int arr[] = {2, 4, 6, 8, 10, 12, 14};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 8;

    int result = binarySearch(arr, 0, n - 1, target);

    if (result == -1) {
        printf("Element not found.\n");
    } else {
        printf("Element found at position %d.\n", result + 1);
    }

    return 0;
}
 

problem: Write a Python program to implement the bubble sort algorithm to sort a given array in ascending order.
answer: def bubble_sort(arr):
    n = len(arr)

    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

    return arr

arr = [64, 34, 25, 12, 22, 11, 90]
sorted_arr = bubble_sort(arr)
print("Sorted array:", sorted_arr)




